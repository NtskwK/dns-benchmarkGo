on:
  push:
    branches:
      - "**"
  pull_request:
    branches:
      - "**"
  workflow_dispatch:

permissions:
  contents: write
  actions: write

jobs:
  meta:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - id: set_tag
        run: |
          # 检查标签格式
          if [[ ${{ github.ref }} =~ ^refs/tags/v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9-]+(\.[a-zA-Z0-9-]+)*)?$ ]]; then
            is_release=true
            tag=${GITHUB_REF#refs/tags/}
            echo "Release tag format is valid: $tag"
          else
            is_release=false
            # 获取最新的发布标签
            tag=$(curl -sX GET "https://api.github.com/repos/${{ github.repository }}/releases/latest" --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' | awk '/tag_name/{print $4}' FS='["]')
            if [[ ! $tag =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
              echo "No valid release tag found, using v0.0.0"
              tag="v0.0.0"
            fi
            tag=$(date "+$tag-%y%m%d-$(git rev-parse --short HEAD)")
          fi

          if ! $($is_release) ; then
            prefix=${tag%-*-*}
            suffix=${tag#$prefix-}
            tag="$prefix-ci.$suffix"
          fi

          # 检查是否为预发布版本
          is_prerelease=false
          if [[ $tag =~ .*alpha.* || $tag =~ .*beta.* || $tag =~ .*rc.* || $tag =~ .*dev.* || $tag =~ .*-ci.* ]]; then
            is_prerelease=true
            echo "This is a pre-release version"
          fi

          echo tag=$tag | tee -a $GITHUB_OUTPUT
          echo is_release=$is_release | tee -a $GITHUB_OUTPUT
          echo is_prerelease=$is_prerelease | tee -a $GITHUB_OUTPUT
    outputs:
      tag: ${{ steps.set_tag.outputs.tag }}
      is_release: ${{ steps.set_tag.outputs.is_release }}
      is_prerelease: ${{ steps.set_tag.outputs.is_prerelease }}

  build:
    needs: meta
    strategy:
      matrix:
        include:
          - runner: macos-15-intel
            name: macos
            arch: amd64
          - runner: macos-15
            name: macos
            arch: arm64

          - runner: ubuntu-latest
            name: linux
            arch: amd64
          - runner: ubuntu-24.04-arm
            name: linux
            arch: arm64

          - runner: windows-11-arm
            name: windows
            arch: arm64
          - runner: windows-latest
            name: windows
            arch: amd64

    runs-on: ${{ matrix.runner }}

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.23"

      - name: Install pnpm
        uses: pnpm/action-setup@v4.1.0
        with:
          version: latest

      - name: Set node LTS
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Install
        run: pnpm install
        working-directory: ./src/web

      - name: Build Frontend
        run: pnpm build
        working-directory: ./src/web

      - name: Build
        shell: bash
        run: |
          cd src
          go build -ldflags "-s -w" -tags release -o release/dnsBenchmark-${{ matrix.name }}-${{ matrix.arch }} .

      - uses: actions/upload-artifact@v4
        with:
          name: dnsBenchmark-${{ matrix.name }}-${{ matrix.arch }}
          if-no-files-found: error
          path: "src/release"

  changelog:
    name: Generate changelog
    runs-on: ubuntu-latest
    outputs:
      release_body: ${{ steps.git-cliff.outputs.content }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate a changelog
        uses: orhun/git-cliff-action@v4
        id: git-cliff
        with:
          config: .github/cliff.toml
          args: -vv --latest --strip header
        env:
          OUTPUT: CHANGES.md
          GITHUB_REPO: ${{ github.repository }}

  release:
    if: ${{ needs.meta.outputs.is_release == 'true' }}
    needs: [meta, build, changelog]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: release

      - uses: softprops/action-gh-release@v2.2.2
        with:
          files: release/*
          tag_name: ${{ needs.meta.outputs.tag }}
          body: ${{ needs.changelog.outputs.release_body }}
          draft: false
          prerelease: ${{ needs.meta.outputs.is_prerelease == 'true' }}
