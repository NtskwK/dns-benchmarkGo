{
  "totalRequests": 202,
  "totalSuccessResponses": 178,
  "totalNegativeResponses": 3,
  "totalErrorResponses": 1,
  "totalIOErrors": 20,
  "TotalIDmismatch": 0,
  "totalTruncatedResponses": 0,
  "responseRcodes": { "NOERROR": 181, "SERVFAIL": 1 },
  "questionTypes": { "A": 104, "AAAA": 98 },
  "queriesPerSecond": 20.2,
  "benchmarkDurationSeconds": 10,
  "latencyStats": {
    "minMs": 19,
    "meanMs": 37,
    "stdMs": 57,
    "maxMs": 570,
    "p99Ms": 209,
    "p95Ms": 71,
    "p90Ms": 37,
    "p75Ms": 30,
    "p50Ms": 27
  },"geocode":""}

// go 代码
package main

import (
	"encoding/json"
	"fmt"
)

type LatencyStats struct {
	MinMs  int `json:"minMs"`
	MeanMs int `json:"meanMs"`
	StdMs  int `json:"stdMs"`
	MaxMs  int `json:"maxMs"`
	P99Ms  int `json:"p99Ms"`
	P95Ms  int `json:"p95Ms"`
	P90Ms  int `json:"p90Ms"`
	P75Ms  int `json:"p75Ms"`
	P50Ms  int `json:"p50Ms"`
}

type DnspyreResult struct {
	TotalRequests           int            `json:"totalRequests"`
	TotalSuccessResponses   int            `json:"totalSuccessResponses"`
	TotalNegativeResponses  int            `json:"totalNegativeResponses"`
	TotalErrorResponses     int            `json:"totalErrorResponses"`
	TotalIOErrors           int            `json:"totalIOErrors"`
	TotalIDmismatch         int            `json:"TotalIDmismatch"`
	TotalTruncatedResponses int            `json:"totalTruncatedResponses"`
	QuestionTypes           map[string]int `json:"questionTypes"`
	QueriesPerSecond        float64        `json:"queriesPerSecond"`
	BenchmarkDurationSeconds int           `json:"benchmarkDurationSeconds"`
	LatencyStats            LatencyStats   `json:"latencyStats"`
	ResponseRcodes          map[string]int `json:"responseRcodes,omitempty"`
}

func parseDnspyreResult(jsonData string) (*DnspyreResult, error) {
	var result DnspyreResult
	err := json.Unmarshal([]byte(jsonData), &result)
	if err != nil {
		return nil, fmt.Errorf("解析JSON失败: %v", err)
	}
	return &result, nil
}

func printDnspyreResult(result *DnspyreResult) {
	fmt.Printf("总请求数: %d\n", result.TotalRequests)
	fmt.Printf("成功响应数: %d\n", result.TotalSuccessResponses)
	fmt.Printf("负面响应数: %d\n", result.TotalNegativeResponses)
	fmt.Printf("错误响应数: %d\n", result.TotalErrorResponses)
	fmt.Printf("IO错误数: %d\n", result.TotalIOErrors)
	fmt.Printf("ID不匹配数: %d\n", result.TotalIDmismatch)
	fmt.Printf("截断响应数: %d\n", result.TotalTruncatedResponses)
	fmt.Printf("每秒查询数: %.1f\n", result.QueriesPerSecond)
	fmt.Printf("基准测试持续时间(秒): %d\n", result.BenchmarkDurationSeconds)
	
	fmt.Println("查询类型统计:")
	for qType, count := range result.QuestionTypes {
		fmt.Printf("  %s: %d\n", qType, count)
	}
	
	if len(result.ResponseRcodes) > 0 {
		fmt.Println("响应Rcode统计:")
		for rcode, count := range result.ResponseRcodes {
			fmt.Printf("  %s: %d\n", rcode, count)
		}
	}
	
	fmt.Println("延迟统计(毫秒):")
	fmt.Printf("  最小: %d, 平均: %d, 标准差: %d, 最大: %d\n", 
		result.LatencyStats.MinMs, result.LatencyStats.MeanMs, 
		result.LatencyStats.StdMs, result.LatencyStats.MaxMs)
	fmt.Printf("  P50: %d, P75: %d, P90: %d, P95: %d, P99: %d\n",
		result.LatencyStats.P50Ms, result.LatencyStats.P75Ms,
		result.LatencyStats.P90Ms, result.LatencyStats.P95Ms,
		result.LatencyStats.P99Ms)
}

func main() {
	// 这里可以添加从文件读取JSON数据的代码
	// 为了演示，我们直接使用硬编码的JSON字符串
	jsonData := `{"totalRequests": 211, "totalSuccessResponses": 182, ...}`
	
	result, err := parseDnspyreResult(jsonData)
	if err != nil {
		fmt.Printf("错误: %v\n", err)
		return
	}
	
	printDnspyreResult(result)
}
